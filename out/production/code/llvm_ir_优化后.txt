declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i32)
define dso_local void @foo(i32 %0){
    %2 = alloca i32
    store i32 %0,i32* %2
    store i32 1,i32* 1
    ret void
}

define dso_local i32 @main(){
    %1 = alloca [10 x i8]
    %2 = getelementptr inbounds [10 x i8],[10 x i8]* %1,i32 0,i32 0
    store i8 104,i8* %2
    %3 = getelementptr inbounds i8,i8* %2,i32 1
    store i8 101,i8* %3
    %4 = getelementptr inbounds i8,i8* %3,i32 1
    store i8 108,i8* %4
    %5 = getelementptr inbounds i8,i8* %4,i32 1
    store i8 108,i8* %5
    %6 = getelementptr inbounds i8,i8* %5,i32 1
    store i8 111,i8* %6
    %7 = getelementptr inbounds i8,i8* %6,i32 1
    store i8 0,i8* %7
    %8 = getelementptr inbounds i8,i8* %7,i32 1
    store i8 0,i8* %8
    %9 = getelementptr inbounds i8,i8* %8,i32 1
    store i8 0,i8* %9
    %10 = getelementptr inbounds i8,i8* %9,i32 1
    store i8 0,i8* %10
    %11 = getelementptr inbounds i8,i8* %10,i32 1
    store i8 0,i8* %11
    %12 = getelementptr inbounds [10 x i8],[10 x i8]* %1,i32 0,i32 0
    %13 = load i8,i8* %12
    %14 = zext i8 %13 to i32
    %15 = getelementptr inbounds [10 x i8],[10 x i8]* %1,i32 0,i32 %14
    %16 = load i8,i8* %15
    %17 = zext i8 %16 to i32
    call void @foo(i32 %17)
    ret i32 0
}

